packages = c("gapminder","dplyr","ggplot2")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
packages = c("gapminder","dplyr","ggplot2")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
?filter
?bind_rows
jimi
?min_rank
x <- factor(c(5,7,9,11))
x
unclass(x)
?unclass
as.numeric(x)
as.character(x)
x <- c("member" = "name")
x
vignette("databases", package = "dpylr")
vignette("databases", package = "dplyr")
packages = c("gapminder","dplyr","ggplot2","lahman")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
install.packages("lahman")
packages = c("gapminder","dplyr","ggplot2","Lahman")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
Salaries
as.tibble(Salaries)
as.tibble(Salaries)
?as.tibble()
?as_tibble()
as_tibble(Salaries)
# Examine lahmanNames
lahmanNames
LahmanData
# Examine lahmanNames
lahmanNames
?Lahman
battingLabels
Lahman
Lahman::Label()
Lahman::Label(names)
Lahman::Label("names")
tally()
?tally()
readRDS(file = "lahmanNames.rds")
# Find variables in common
lahmanNames %>%
reduce(intersect)
lahmanNames <- readRDS(file = "lahmanNames.rds")
# Find variables in common
lahmanNames %>%
reduce(intersect)
??reduce
?reduce
?reduce()
packages = c("gapminder","dplyr","ggplot2","Lahman","purrr")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
# Find variables in common
lahmanNames %>%
reduce(intersect)
lahmanNames %>%
# Bind the data frames in lahmanNames
bind_rows(.id="dataframe") %>%
# Group the result by var
group_by(var) %>%
# Tally the number of appearances
tally() %>%
# Filter the data
filter(n > 1) %>%
# Arrange the results
arrange(desc(n))
master
Master
head(Master)
as.tibble(Master)
as_tibble(Master)
players <- Master %>%
# Return one row for each distinct player
distinct(playerID,nameFirst,nameLast)
View(players)
# find out how many players are not in Salaries DF
players %>%
# Find all players who do not appear in Salaries
anti_join(Salaries, by = "playerID") %>%
# Count them
count()
as_tibble(Appearances)
players %>%
anti_join(Salaries, by = "playerID") %>%
# How many unsalaried players appear in Appearances?
semi_join(Appearances, by = "playerID") %>%
count()
players %>%
# Find all players who do not appear in Salaries
anti_join(Salaries, by ="playerID") %>%
# Join them to Appearances
left_join(Appearances, by="playerID") %>%
# Calculate total_games for each player
group_by(playerID) %>%
summarise(total_games = sum(G_all)) %>%
# Arrange in descending order by total_games
arrange(desc(total_games))
players %>%
# Find all players who do not appear in Salaries
anti_join(Salaries, by ="playerID") %>%
# Join them to Appearances
left_join(Appearances, by="playerID") %>%
# Calculate total_games for each player
group_by(playerID) %>%
summarise(total_games = sum(G_all,na.rm = T)) %>%
# Arrange in descending order by total_games
arrange(desc(total_games))
?sum
players %>%
# Find unsalaried players
anti_join(Salaries, by = "player_ID") %>%
# Join Batting to the unsalaried players
left_join(Batting, by = "player_ID") %>%
# Group by player
group_by(player_ID) %>%
# Sum at-bats for each player
summarise(total_at_bat= sum(AB, na.rm = T)) %>%
# Arrange in descending order
arrange(desc(total_at_bat))
players %>%
# Find unsalaried players
anti_join(Salaries, by = "player_ID")
players %>%
# Find unsalaried players
anti_join(Salaries, by = "playerID") %>%
# Join Batting to the unsalaried players
left_join(Batting, by = "playerID") %>%
# Group by player
group_by(playerID) %>%
# Sum at-bats for each player
summarise(total_at_bat= sum(AB, na.rm = T)) %>%
# Arrange in descending order
arrange(desc(total_at_bat))
HallOfFame
packages = c("gapminder","dplyr","ggplot2","Lahman","purrr")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
as_tibble(HallOfFame)
HallOfFame %>%
distinct(category)
HallOfFame %>%
filter(category == "Manager")
as_tibble(HallOfFame)
AwardsPlayers
as_tibble(AwardsPlayers)
AwardsPlayers %>%
tally()
AwardsPlayers %>%
tally("playerID")
AwardsPlayers %>%
tally(playerID)
AwardsPlayers %>%
group_by(playerID) %>%
tally(playerID)
AwardsPlayers %>%
group_by(playerID) %>%
tally()
?count()
AwardsPlayers %>%
count( vars = playerID)
# Tally the number of awards in AwardsPlayers by playerID
nAwards <- AwardsPlayers %>%
count(vars= playerID)
nAwards %>%
# Filter to just the players in inducted
semi_join(inducted, by = "playerID") %>%
# Calculate the mean number of awards per player
summarise( avg_n = mean(n, na.rm = T))
View(nAwards)
# Tally the number of awards in AwardsPlayers by playerID
nAwards <- AwardsPlayers %>%
group_by(playerID) %>%
tally()
View(package.check)
View(nAwards)
nAwards %>%
# Filter to just the players in inducted
semi_join(inducted, by = "playerID") %>%
# Calculate the mean number of awards per player
summarise( avg_n = mean(n, na.rm = T))
# Find distinct players in HallOfFame with inducted == "Y"
inducted <- HallOfFame %>%
filter(inducted == "Y") %>%
distinct(playerID)
nAwards %>%
# Filter to just the players in inducted
semi_join(inducted, by = "playerID") %>%
# Calculate the mean number of awards per player
summarise( avg_n = mean(n, na.rm = T))
as_tibble(Salaries)
Salaries %>%
group_by(playerID) %>%
summarise(max_salary = max(salary))
Salaries %>%
group_by(playerID) %>%
summarise(max_salary = max(salary)) %>%
arrange(desc(max_salary))
Salaries %>%
group_by(playerID) %>%
summarise(max_salary = max(salary)) %>%
summarise(avg_salary = mean(max_salary))
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated)
## Hall of fame
# Find the distinct players that appear in HallOfFame
nominated <- HallOfFame %>%
distinct(playerID)
nominated %>%
# Count the number of players in nominated
count()
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated)
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated) %>%
group_by( playerID) %>%
summarise(last_year = max(yearID))
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated) %>%
group_by( playerID) %>%
summarise(last_year = max(yearID)) %>%
left_join(HallOfFame)
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated) %>%
group_by( playerID) %>%
summarise(last_year = max(yearID)) %>%
left_join(HallOfFame) %>%
filter (yearID - last_year < 5)
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated) %>%
group_by( playerID) %>%
summarise(last_year = max(yearID)) %>%
left_join(HallOfFame) %>%
filter (yearID - last_year =< 5)
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated) %>%
group_by( playerID) %>%
summarise(last_year = max(yearID)) %>%
left_join(HallOfFame) %>%
filter (yearID - last_year <= 5)
Appearances %>%
# Filter Appearances against nominated
semi_join(nominated) %>%
group_by( playerID) %>%
summarise(last_year = max(yearID)) %>%
left_join(HallOfFame) %>%
filter (yearID - last_year < 5)
iris.tidy <- iris %>%
select (-Flower) %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
install.packages(pkg, dependencies = TRUE)
packages = c("ggplot2","tidyverse","RColorBrewer")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
iris.tidy <- iris %>%
select (-Flower) %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
iris.tidy <- iris %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
iris %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
iris
iris %>%
gather(key, Value, -Species)
iris %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
