}
})
# Putting lines in a vector
lines <- c(line1, line2, line3)
# Print lines
lines
# Use writeLines() on lines
writeLines(lines)
# Use writeLines() on the string "hello\n\U1F30D"
writeLines("hello\n\U1F30D")
# cat is a similar function as writelines, but it tries to convert non-character objects to string
cat(lines)
# Should display: To have a \ you need \\
writeLines("To have a \\ you need \\\\")
# Should display:
# This is a really
# really really
# long string
writeLines("This is a really
really really \nlong string")
# Use writeLines() with
# "\u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e"
# hello world in hindi
writeLines("\u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e")
# Some vectors of numbers
percent_change  <- c(4, -1.91, 3.00, -5.002)
income <-  c(72.19, 1030.18, 10291.93, 1189192.18)
p_values <- c(0.12, 0.98, 0.0000191, 0.00000000002)
# Format c(0.0011, 0.011, 1) with digits = 1
format(c(0.0011, 0.011, 1), digits=1)
# Format c(1.0011, 2.011, 1) with digits = 1
format(c(1.0011, 2.011, 1), digits=1)
# Format percent_change to one place after the decimal point
format(percent_change,digits=2)
# Format income to whole numbers
format(income,digits=2, scientific=F)
# Format p_values in fixed format
format(p_values, scientific=F)
formatted_income <- format(income, digits = 2)
# Print formatted_income
formatted_income
# Call writeLines() on the formatted income
writeLines(formatted_income)
# Define trimmed_income
trimmed_income <- format(income, digits=2, trim=T)
# Call writeLines() on the trimmed_income
writeLines(trimmed_income)
# Call writeLines() on the pretty_income
writeLines(pretty_income)
# Define pretty_income
pretty_income <- format(income, digits=2, big.mark = ",")
# Call writeLines() on the pretty_income
writeLines(pretty_income)
# From the format() exercise
x <- c(0.0011, 0.011, 1)
y <- c(1.0011, 2.011, 1)
# formatC() on x with format = "f", digits = 1
formatC(x, format = "f", digits = 1)
# formatC() on y with format = "f", digits = 1
formatC(y, format = "f", digits = 1)
# Format percent_change to one place after the decimal point
formatC(percent_change, format="f", digits=1)
# percent_change with flag = "+"
#The flag argument allows you to provide some modifiers that,
#for example, force the display of the sign (flag = "+"),
#left align numbers (flag = "-") and pad numbers with leading zeros (flag = "0").
formatC(percent_change, format="f", digits=1, flag = "+")
# Format p_values using format = "g" and digits = 2
formatC(p_values, format="g", digits=2)
# Add $ to pretty_income
paste("$",pretty_income, sep="")
# Add % to pretty_percent
paste(pretty_percent,"%",sep="")
# Define pretty_income
pretty_income <- format(income, digits=2, big.mark = ",")
# Call writeLines() on the pretty_income
writeLines(pretty_income)
# Define pretty_income
pretty_income <- format(income, digits=2, big.mark = ",", trim=T)
# Call writeLines() on the pretty_income
writeLines(pretty_income)
# Add $ to pretty_income
paste("$",pretty_income, sep="")
# Add $ to pretty_income
writelines(paste("$",pretty_income, sep=""))
# Add $ to pretty_income
writeLines(paste("$",pretty_income, sep=""))
packages = c("ggplot2","stringr")
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
packages = c("ggplot2","stringr","babynames")
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
packages = c("ggplot2","stringr","babynames", "tidyverse")
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
# Extracting vectors for boys' and girls' names
babynames_2014 <- filter(babynames, year == 2014)
boy_names <- filter(babynames_2014, sex == "M")$name
girl_names <- filter(babynames_2014, sex == "F")$name
# Take a look at a few boy_names
head(boy_names)
# Find the length of all boy_names
boy_length <- str_length(boy_names)
# Take a look at a few lengths
head(boy_length)
# Find the length of all girl_names
girl_length <-str_length(girl_names)
# Find the difference in mean length
mean(girl_length) - mean(boy_length)
# Confirm str_length() works with factors
head(str_length(factor(boy_names)))
# Look for pattern "zz" in boy_names
contains_zz <- str_detect(boy_names, pattern = "zz")
# Examine str() of contains_zz
str(contains_zz)
# How many names contain "zz"?
sum(contains_zz)
which(contains_zz)
baby_name[which(contains_zz)]
baby_names[which(contains_zz)]
boy_names[which(contains_zz)]
boy_names[(contains_zz)]
girl_names
str_count(girl_names, pattern = "a")
# Count occurrences of "a" in girl_names
number_as <- str_count(girl_names, pattern = "a")
# Count occurrences of "A" in girl_names
number_As <- str_count(girl_names, pattern = "A")
# Histograms of number_as and number_As
hist(number_as )
hist(number_As)
# Histograms of number_as and number_As
hist(number_as )
# Find total "a" + "A"
total_as <- number_As + number_as
# girl_names with more than 4 a's
girl_names[total_as >4]
total_as
packages = c("ggplot2","stringr","babynames", "rebus")
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
# Some strings to practice with
x <- c("cat", "coat", "scotland", "tic toc")
# Print END
END
# Run me
str_view(x, pattern = START %R% "c")
# Match the strings that start with "co"
str_view(x, pattern = START %R% "co")
# Match the strings that end with "at"
str_view(x, pattern = "at" %R% END)
# Match the strings that is exactly "cat"
str_view(x, pattern = START %R% "cat" %R% END)
str_view(x, pattern = "^c")
str_view(x, pattern = "^co")
str_view(x, pattern = "at$")
str_view(x, pattern = "^at$")
str_view(x, pattern = "^cat$")
ANY_CHAR
x <- c("cat", "coat", "scotland", "tic toc")
# Match any character followed by a "t"
str_view(x, pattern = ANY_CHAR %R% "t")
str_view(x, pattern = ".t")
str_view(x, pattern = "..")
str_view(x, pattern = "^...$" )
x <- c("cat", "coat", "scotland", "tic toc")
pattern <- "c" %R% ANY_CHAR %R% "t"
str_detect(x, pattern)
str_subset(x, pattern)
str_count(x, pattern)
x <- c("cat", "coat", "scotland", "tic toct")
str_count(x, pattern)
str_subset(x, pattern)
x <- c("ow", "ooh", "yeeeah!", "shh")
str_view(x, pattern = zero_or_more(vowels))
# Create character class containing vowels
vowels <- char_class("aeiouAEIOU")
str_view(x, pattern = zero_or_more(vowels))
# Vowels from last exercise
vowels <- char_class("aeiouAEIOU")
# Use `negated_char_class()` for everything but vowels
not_vowels <- negated_char_class(vowels)
# See names with only vowels
str_view(boy_names,
pattern = exactly(vowels),
match = TRUE)
# See names with only vowels
str_view(boy_names,
pattern = exactly(vowels),
match = TRUE)
# See names with no vowels
str_view(boy_names,
pattern = not_vowels,
match = TRUE)
# See names with no vowels
str_view(boy_names,
pattern = one_or_more(not_vowels),
match = TRUE)
?exactly()
# Use `negated_char_class()` for everything but vowels
not_vowels <- negated_char_class("aeiouAEIOU")
not_vowels
negated_char_class(vowels)
# See names with no vowels
str_view(boy_names,
pattern = exactly(one_or_more(not_vowels)),
match = TRUE)
# See names with only vowels
str_view(boy_names,
pattern = exactly(one_or_more(vowels)),
match = TRUE)
packages = c("ggplot2","stringr","babynames", "rebus","neiss")
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
neiss
install.packages("devtools")
devtools::install_github("hadley/neiss")
head(population)
head(neiss::population)
head(neiss::injuries)
packages = c("ggplot2","stringr","babynames", "rebus")
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
# Test pattern
str_view(contact, phone_pattern)
####
# Take a look at ALL digits
str_view_all(contact, pattern = DGT)
str_view("paris in the the rain",
SPC %R%
one_or_more(WRD) %R%
SPC
)
str_view("paris in the the rain",
SPC %R%
one_or_more(WRD) %R%
SPC %R%
REF1
)
str_view("paris in the the rain",
SPC %R%
capture(one_or_more(WRD)) %R%
SPC %R%
REF1
)
str_view("paris in the the the rain",
SPC %R%
capture(one_or_more(WRD)) %R%
SPC %R%
REF1
)
str_view("paris in the in  rain",
SPC %R%
capture(one_or_more(WRD)) %R%
SPC %R%
REF1
)
str_view("paris in in the   rain",
SPC %R%
capture(one_or_more(WRD)) %R%
SPC %R%
REF1
)
str_view("paris in the   rain",
SPC %R%
capture(one_or_more(WRD)) %R%
SPC %R%
REF1
)
str_view(c("hello", "sweet", "kitten"),
pattern = capture(LOWER) %R% REF1)
WRD
LOWER
x <- c("\u00e8", "\u0065\u0300")
writeLines(x)
as.hexmode(utf8ToInt(stri_trans_nfd("\u00e8")))
x <- c("Adele", "Ad\u00e8le", "Ad\u0065\u0300le")
writeLines(x)
exactly()
exactly
whole_word()
whole_word
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point()
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color=Species)
iris
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color=Species)
geom_point(color="Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Species")
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Species")
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color=Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color=Species))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Blue")
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Species")
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color=Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Species")
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color=Species))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color="Species"Blue))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color="Blue"))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Blue")
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color="Blue"))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color="blue"))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color=blue))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color="blue"))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="blue")
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color="blue"))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color=blue))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color=blue))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color=""))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(color="Blue"))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Blue")
iris
ggplot(iris[Species = "setosa"], aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Blue")
ggplot(iris[Species == "setosa"], aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Blue")
ggplot(iris[iris$Species == "setosa"], aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Blue")
ggplot(iris[iris$Species == "setosa",], aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(color="Blue")
iris[2,3]
iris$Sepal.Width
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(~ Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(Species~)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(Species~.)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(Species~)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(~Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(.~Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(~Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(.~Species)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(Species~)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
facet_grid(Species~.)
length(iris)
summary(iris)
str(iris)
x <- 1:150
TEST <- 1:150
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point()
TEST <- as.data.frame(  1:150)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point() +
geom_point( data= TEST, aes(y=TEST))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point()
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(col = Species))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(col = Species, alpha = 0.5))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(col = Species) alpha = 0.5)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(col = Species), alpha = 0.5)
?geom_point
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(col = Species, alpha = 0.5))
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(col = Species
)alpha = 0.5)
ggplot(iris, aes(x=Sepal.Length, y= Sepal.Width)) +
geom_point(aes(col = Species) ,alpha = 0.5)
# Check match hasn't changed
str_view(hero_contacts, email)
geom_bar()
ggplot(iris, aes(x=Species)) +
geom_bar()
ggplot(iris, aes(x=Species)) +
geom_bar(aes(col=Species))
ggplot(iris, aes(x=Species)) +
geom_bar(aes(fill=Species))
ggplot(iris, aes(x=Species)) +
geom_bar(aes(y=count, fill=Species))
ggplot(iris, aes(x=Species)) +
geom_bar(aes(fill=Species))
?geom_bar
# View text containing phone numbers
contact
# Pull out from narratives
str_match(narratives, pattern)
str_view("paris in the  the rain",
SPC %R%
capture(one_or_more(WRD)) %R%
SPC %R%
REF1
)
str_view("paris in the the rain",
SPC %R%
capture(one_or_more(WRD)) %R%
SPC %R%
REF1
)
str_view(boy_names, pattern = by_parts, match = TRUE)
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
packages = c("ggplot2","stringr","babynames", "rebus","neiss")
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
?mean()
?geom_boxpolt()
package.check <- lapply(packages, FUN= function(pkg)  {
if(!require(pkg, character.only = T)) {
install.packages(pkg, dependencies = T)
library(pkg, character.only = T)
}
})
?geom_boxpolt()
?geom_boxplot()
p <- ggplot(mpg, aes(class, hwy))
p + geom_boxplot()
p + geom_boxplot() + geom_jitter(width = 0.2)
p + geom_boxplot() + coord_flip()
p + geom_boxplot(notch = TRUE)
p + geom_boxplot(varwidth = TRUE)
p + geom_boxplot(fill = "white", colour = "#3366FF")
# By default, outlier points match the colour of the box. Use
# outlier.colour to override
p + geom_boxplot(outlier.colour = "red", outlier.shape = 1)
library("lubridate")
?`lubridate-package`
x <- c("09-01-01", "09-01-02", "09-01-03")
ymd(x)
x <- c("2009-01-01", "2009-01-02", "2009-01-03")
ymd(x)
?ungroup()
library("tidyverse")
?ungroup()
by_cyl <- mtcars %>% group_by(cyl)
# grouping doesn't change how the data looks (apart from listing
# how it's grouped):
by_cyl
for (trials in c(100,1000,10000,100000)) {
print( mean(rbinom(trials, 10, 0.3) >=5) )
}
