ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position="stack") # defaut position is stack, thats why this plot is similiar to the previous plot
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position="fill")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position="fill") #proportions
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position="dodge") # side by side
## exercise :Overlapping bar plots
# 1 - The last plot form the previous exercise
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "dodge")
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(width=0.2)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d,alpha=0.6)
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(width=0.5)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d,alpha=0.6)
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(width=1)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position="dodge") # side by side
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(width=0.2)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d,binwidth = 0.1)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d,alpha=0.6)
?brewer.pal
??brewer.pal
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set2")
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Dark2")
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Accent")
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set3")
# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y =Value, col = Part)) +
geom_jitter() +
facet_grid(. ~ Measure)
# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y =Value, col = Part)) +
geom_jitter() +
facet_grid(. ~ Measure) +
scale_fill_brewer(palette = "Set3")
# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y =Value, col = Part)) +
geom_jitter() +
facet_grid(. ~ Measure) +
scale_fill_brewer(palette = "Set2")
# 3 - Map wt to x, mpg to y and cyl to col
ggplot(mtcars, aes(x=wt,y=mpg, col=cyl)) +
geom_point()
# 3 - Map wt to x, mpg to y and cyl to col
ggplot(mtcars, aes(x=wt,y=mpg, col=cyl)) +
geom_point() +
scale_fill_brewer(palette = "Set3")
new_col <- colorRampPalette(c("#FFFFFF", "#0000FF"))
new_col(4) # the newly extrapolated colours
munsell::plot_hex(new_col(4)) # Quick and dirty plot
munsell::plot_hex(new_col(6)) # Quick and dirty plot
# Definition of a set of blue colors
blues <- brewer.pal(11, "Blues") # from the RColorBrewer package
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues") # from the RColorBrewer package
packages = c("ggplot2","tidyverse","RColorBrewer")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues") # from the RColorBrewer package
# Definition of a set of blue colors
blues <- brewer.pal(11, "Blues") # from the RColorBrewer package
blues
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues") # from the RColorBrewer package
blues
# 1 - Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# 2 - Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values=blue_range(11))
head(economics)
?economics
ggplot(economics, aes(x=date,y=unemploy)) +
geom_line()
# Adjust plot to represent the fraction of total population that is unemployed
ggplot(economics, aes(x=date,y=unemploy/pop)) +
geom_line()
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
iris.tidy
iris.tidy <- iris %>%
select (-Flower) %>%
gather(key, Value, -Species) #%>%
iris.tidy
str(iris)
head(iris)
View(iris.tidy)
ggplot(mtcars, aes(cyl, wt, fill = am)) +
geom_dotplot(binaxis = "y", stackdir = "center")
??stackdir
?stackdir
??stackdir
?geom_dotplot
ggplot(mtcars, aes(cyl, wt, fill = am)) +
geom_dotplot(binaxis = "y")
?geom_dotplot
ggplot(mtcars, aes(cyl, wt, fill = am)) +
geom_dotplot(binaxis = "y",stackdir="center")
ggplot(mtcars, aes(cyl, wt, fill = am)) +
geom_dotplot(binaxis = "y",stackdir="centerwhole")
qplot(
cyl, wt,
data = mtcars,
fill = am,
geom = dotplot,
binaxis = y,
stackdir = "center"
)
qplot(
cyl, wt,
data = mtcars,
fill = am,
geom = "dotplot",
binaxis = y,
stackdir = "center"
)
qplot(
cyl, wt,
data = mtcars,
fill = am,
geom = "dotplot",
binaxis = wt,
stackdir = "center"
)
qplot(
cyl, wt,
data = mtcars,
fill = am,
geom = "dotplot",
binaxis = "y",
stackdir = "center"
)
?geom_smooth
?facet_grid
?geom_smooth
# The previous plot, without points:
ggplot(mtcars, aes(x = wt, y = mpg))+
geom_smooth(method="lm",se=FALSE)
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
packages = c("ggplot2","tidyverse","RColorBrewer")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
# The previous plot, without points:
ggplot(mtcars, aes(x = wt, y = mpg))+
geom_smooth(method="lm",se=FALSE)
# Plot 1: change the LOESS span
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
# Add span below
geom_smooth(se = F,span=0.7) # span defines window for which loess divides the data
# Plot 2: Set the overall model to LOESS and use a span of 0.7
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
# Change method and add span below
stat_smooth( aes(group = 1),span=0.7,
se = F, col = "black")
# the problem with above graph is that the overall smooth line is not coming in the legend, for this
# we need to add col in aes() inside stat_smooth
# Plot 3: Set col to "All", inside the aes layer of stat_smooth()
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1,col = "ALL"),
# Remove the col argument below
se = F, span = 0.7)
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
scale_color_manual()
#now the color of the overall line is not black anymore, using scale_Color_manual() for that.
# Plot 4: Add scale_color_manual to change the colors
myColors <- c(brewer.pal(3, "Dark2"), "black")
?scale_color_manual
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
scale_color_manual(values=myColors)
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
scale_color_manual("Cylinders",values=myColors)
?scale_color_gradientn()
?stat_quantile
?stat_sum
??size
?geom_point
?scale_size
ggplot(iris, aes(y=Sepal.length,x=Species)) +
geom_point()
head(iris)
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
geom_point()
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
geom_jitter()
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
geom_jitter(width=0.2)
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
geom_point(position="jitter")
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1))
packages = c("ggplot2","tidyverse","RColorBrewer","Hmisc")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1))
?stat_summary
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),
geom="errorbar")
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),
geom="errorbar",width=0.1)
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.y = mean,geom="point") +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),
geom="errorbar",width=0.1)
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.data = mean,geom="point") +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),
geom="errorbar",width=0.1)
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.y = mean,geom="point") +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),
geom="errorbar",width=0.1)
?fun.data
??fun.data
?stat_summary
ggplot(iris, aes(y=Sepal.Length,x=Species)) +
stat_summary(fun.y = mean,geom="point") +
stat_summary(fun.data = mean_sdl,fun.args = list(mult=1),
geom="errorbar",width=0.1)
# mammals dataset
library("MASS")
mammals
mam.new <- data.frame(body=log10(mammals$body))
View(mam.new)
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..))
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()
?geom_rug
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_summary(fun=dnorm,color="Red")
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_summary(fun=dnorm,color="Red",
arg=list(mean=mean(mam.new),sd= sd(mam.new)))
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_summary(fun=dnorm,color="Red",
arg=list(mean=mean(mam.new$body),sd= sd(mam.new)))
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_summary(fun=dnorm,color="Red",
arg=list(mean=mean(mam.new$body),sd= sd(mam.new$body)))
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_summary(fun=dnorm,color="red",
arg=list(mean=mean(mam.new$body),
sd= sd(mam.new$body)))
dnorm
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_summary(fun = dnorm,color="red",
arg = list(mean=mean(mam.new$body),
sd= sd(mam.new$body)))
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_function(fun = dnorm,color="red",
arg = list(mean=mean(mam.new$body),
sd= sd(mam.new$body)))
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_function(fun = dnorm,color="red",
arg = list(mean=mean(mam.new),
sd= sd(mam.new)))
str(mam.new)
mean(man.new)
mean(mam.new)
mean(mam.new[,1])
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_function(fun = dnorm,color="red",
arg = list(mean=mean(mam.new$body),
sd= sd(mam.new$body)))
packages = c("ggplot2","tidyverse","RColorBrewer","Hmisc")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
ggplot(mam.new,aes(x=body)) +
geom_histogram(aes(y=..density..)) +
geom_rug()  +
stat_function(fun = dnorm,color="red",
arg = list(mean=mean(mam.new$body),
sd= sd(mam.new$body)))
?head
?facet_wrap
packages = c("ggplot2","tidyverse","RColorBrewer")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
# Replace ___ with the correct column
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
# Replace ___ with the correct column
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
# Replace ___ with the correct column
ggplot(mtcars, aes(x = wt, y = mpg, size = disp)) +
geom_point()
# Explore the diamonds data frame with str()
str(diamonds)
# Add geom_point() with +
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point()
# Add geom_point() and geom_smooth() with +
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
geom_smooth() # adds a prediction line
# 3 - Copy the above command and assign the correct value to col in aes()
ggplot(diamonds, aes(x = carat, y = price, color=clarity)) +
geom_smooth()
# 4 - Keep the color settings from previous command. Plot only the points with argument alpha.
ggplot(diamonds, aes(x = carat, y = price, color=clarity)) +
geom_point(alpha=0.4) # 0.4 makes the points 40 % transparent
dia_plot <- ggplot(diamonds, aes(x=carat,y=price))
# 1 - The dia_plot object has been created for you
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))
# 2 - Expand dia_plot by adding geom_point() with alpha set to 0.2
dia_plot <- dia_plot + geom_point(alpha=0.2)
# 3 - Plot dia_plot with additional geom_smooth() with se set to FALSE
dia_plot + geom_smooth(se=FALSE) #You don't want any error shading, which can be achieved by setting the se = FALSE
# Plot 3: include a lm for the entire dataset in its whole
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point() + # Copy from Plot 1
geom_smooth(method="lm",se=FALSE) + # Copy from Plot 2
geom_smooth(method="lm",se=FALSE,linetype=2,aes(group=3)) #linetype 2 means dash , group=1 tells ggplot2 to draw a single line
View(iris.tidy)
# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y =Value, col = Part)) +
geom_jitter() +
facet_grid(. ~ Measure)
packages = c("ggplot2","tidyverse","RColorBrewer")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y =Value, col = Part)) +
geom_jitter() +
facet_grid(. ~ Measure)
View(iris.wide)
ggplot(iris.wide, aes(x = Length, y = Width, color = Part)) +
geom_jitter() +
facet_grid(. ~Species)
View(iris)
iris %>%
gather(key, value, -Flower, -Species) %>%
head()
iris %>%
gather(key, value, -Flower, -Species) %>%
filter (Flower == 1)
iris %>%
gather(key, value, -Flower, -Species) %>%
filter (Flower == 1) %>%
separate(key, c("Part", "Measure"), "\\.")
iris %>%
gather(key, value, -Flower, -Species) %>%
filter (Flower == 1) %>%
separate(key, c("Part", "Measure"), "\\.")%>%
spread(Measure, value)
# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y =Value, col = Part)) +
geom_jitter()
View(iris.tidy)
iris.tidy <- iris %>%
select (-Flower) %>%
gather(key, Value, -Species) %>%
separate(key, c("Part", "Measure"), "\\.")
View(iris.tidy)
# Think about which dataset you would use to get the plot shown right
# Fill in the ___ to produce the plot given to the right
ggplot(iris.tidy, aes(x = Species, y =Value, col = Measure)) +
geom_jitter()
# Fill in the ___ to produce to the correct iris.wide dataset
iris.wide <- iris %>%
gather(key, value, -Flower, -Species) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
View(iris)
View(iris.wide)
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
# Fill in the ___ to produce to the correct iris.wide dataset
iris.wide <- iris %>%
gather(key, value, -Flower, -Species) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
View(iris.tidy)
View(iris.wide)
View(iris.tidy)
View(iris.wide)
View(iris.tidy)
