{
    "collab_server" : "",
    "contents" : "# Data visualization using GGPLOT 2\n# https://campus.datacamp.com/courses/data-visualization-with-ggplot2-1/\n\npackages = c(\"ggplot2\",\"tidyverse\")\n\npackage.check <- lapply(packages, FUN = function(pkg) {\n  if (!require(pkg, character.only = TRUE)) {\n    install.packages(pkg, dependencies = TRUE)\n    library(pkg, character.only = TRUE)\n  }\n})\n\n\ninstall.packages(\"ggplot2\",dependencies=TRUE)\n\nstr(mtcars)\n?mtcars\n# A scatter plot has been made for you\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point()\n\n# Replace ___ with the correct column\nggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +\n  geom_point()\n\n# Replace ___ with the correct column\nggplot(mtcars, aes(x = wt, y = mpg, size = disp)) +\n  geom_point()\n\n# Explore the diamonds data frame with str()\nstr(diamonds)\n\n# Add geom_point() with +\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point()\n\n\n# Add geom_point() and geom_smooth() with +\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point() +\n  geom_smooth() # adds a prediction line\n\n# 1 - The plot you created in the previous exercise\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point() +\n  geom_smooth()\n\n# 2 - Copy the above command but show only the smooth line\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_smooth()\n\n\n# 3 - Copy the above command and assign the correct value to col in aes()\nggplot(diamonds, aes(x = carat, y = price, color=clarity)) +\n  geom_smooth()\n\n\n# 4 - Keep the color settings from previous command. Plot only the points with argument alpha.\nggplot(diamonds, aes(x = carat, y = price, color=clarity)) +\n  geom_point(alpha=0.4) # 0.4 makes the points 40 % transparent\n\n# Create the object containing the data and aes layers: dia_plot\n#___ <- ggplot(___, aes(x = ___, y = ___)\n\ndia_plot <- ggplot(diamonds, aes(x=carat,y=price))\n# Add a geom layer with + and geom_point()\ndia_plot +\n  geom_point()\n\n# Add the same geom layer, but with aes() inside\n\ndia_plot +\n  geom_point(aes(color=clarity))\n\n# 1 - The dia_plot object has been created for you\ndia_plot <- ggplot(diamonds, aes(x = carat, y = price))\n\n# 2 - Expand dia_plot by adding geom_point() with alpha set to 0.2\ndia_plot <- dia_plot + geom_point(alpha=0.2)\n\n# 3 - Plot dia_plot with additional geom_smooth() with se set to FALSE\ndia_plot + geom_smooth(se=FALSE) #You don't want any error shading, which can be achieved by setting the se = FALSE\n\n# 4 - Copy the command from above and add aes() with the correct mapping to geom_smooth()\ndia_plot + geom_smooth(se=FALSE,aes(col=clarity))\n\n#### comparision with base package \n# Plot the correct variables of mtcars\nplot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\n\n# Change cyl inside mtcars to a factor\nmtcars$fcyl <- as.factor(mtcars$cyl)\n\n# Make the same plot as in the first instruction\nplot(mtcars$wt, mtcars$mpg, col = mtcars$fcyl)\n\n# Use lm() to calculate a linear model and save it as carModel\ncarModel <- lm(mpg ~ wt, data = mtcars)\n\n# Basic plot\nmtcars$cyl <- as.factor(mtcars$cyl)\nplot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\n\n# Call abline() with carModel as first argument and set lty to 2\nabline(carModel, lty = 2)\n\n# Plot each subset efficiently with lapply\n# You don't have to edit this code\nplot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\nlapply(mtcars$cyl, function(x) {\n  abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)\n})\n\n# This code will draw the legend of the plot\n# You don't have to edit this code\nlegend(x = 5, y = 33, legend = levels(mtcars$cyl),\n       col = 1:3, pch = 1, bty = \"n\")\n\n# Convert cyl to factor (don't need to change)\nmtcars$cyl <- as.factor(mtcars$cyl)\n\n# Example from base R (don't need to change)\nplot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)\nabline(lm(mpg ~ wt, data = mtcars), lty = 2)\nlapply(mtcars$cyl, function(x) {\n  abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)\n})\nlegend(x = 5, y = 33, legend = levels(mtcars$cyl),\n       col = 1:3, pch = 1, bty = \"n\")\n\n# Plot 1: add geom_point() to this command to create a scatter plot\nggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n  geom_point() # Fill in using instructions Plot 1\n\n# Plot 2: include the lines of the linear models, per cyl\nggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n  geom_point() + # Copy from Plot 1\n  geom_smooth(method=\"lm\",se=FALSE)  # Fill in using instructions Plot 2\n\n# Plot 3: include a lm for the entire dataset in its whole\nggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n  geom_point() + # Copy from Plot 1\n  geom_smooth(method=\"lm\",se=FALSE) + # Copy from Plot 2\n  geom_smooth(method=\"lm\",se=FALSE,linetype=2,aes(group=3)) #linetype 2 means dash , group=1 tells ggplot2 to draw a single line \n\n\n\n\n### from grouping help ;\n\n# Multiple groups with one aesthetic\nh <- ggplot(nlme::Oxboys, aes(age, height))\n# A single line tries to connect all the observations\nh + geom_line()\n\n# The group aesthetic maps a different line for each subject\nh + geom_line(aes(group = Subject))\n\n# Different groups on different layers\nh <- h + geom_line(aes(group = Subject))\n# Using the group aesthetic with both geom_line() and geom_smooth()\n# groups the data the same way for both layers\nh + geom_smooth(aes(group = Subject), method = \"lm\", se = FALSE)\n# Changing the group aesthetic for the smoother layer\n# fits a single line of best fit across all boys\nh + geom_smooth(aes(group =1), size = 2, method = \"lm\", se = FALSE)\n\n\n########\n\n#gather() rearranges the data frame by specifying the columns that are categorical variables with a - notation. Complete the command. Notice that only one variable is categorical in iris.\n#separate() splits up the new key column, which contains the former headers, according to .. The new column names \"Part\" and \"Measure\" are given in a character vector. Don't forget the quotes.\n\niris.tidy <- iris %>%\n  select (-Flower) %>%\n  gather(key, Value, -Species) %>%\n  separate(key, c(\"Part\", \"Measure\"), \"\\\\.\")\n\n\n\n# Consider the structure of iris, iris.wide and iris.tidy (in that order)\nstr(iris)\nstr(iris.wide)\nstr(iris.tidy)\n\nwhich(is.na(iris.tidy), arr.ind=TRUE)\n\n\n\n# Think about which dataset you would use to get the plot shown right\n# Fill in the ___ to produce the plot given to the right\nggplot(iris.tidy, aes(x = Species, y =Value, col = Part)) +\n  geom_jitter() +\n  facet_grid(. ~ Measure)\n\n\niris$Flower <- 1:nrow(iris)\n\n# Fill in the ___ to produce to the correct iris.wide dataset\niris.wide <- iris %>%\n  gather(key, value, -Flower, -Species) %>%\n  separate(key, c(\"Part\", \"Measure\"), \"\\\\.\") %>%\n  spread(Measure, value) #The last step is to use spread() to distribute the new Measure column and associated value column into two columns.\n\n\nggplot(iris.wide, aes(x = Length, y = Width, color = Part)) +\n  geom_jitter() +\n  facet_grid(. ~Species)\n\n\n##### cyl is converted in factor \n\n# 1 - Map mpg to x and cyl to y\nggplot(mtcars, aes(x=mpg, y=cyl)) +\n  geom_point()\n\n# 2 - Reverse: Map cyl to x and mpg to y\nggplot(mtcars, aes(x=cyl, y=mpg)) +\n  geom_point()\n\n# 3 - Map wt to x, mpg to y and cyl to col\nggplot(mtcars, aes(x=wt,y=mpg, col=cyl)) +\n  geom_point()\n\n# 4 - Change shape and size of the points in the above plot\nggplot(mtcars, aes(x=wt,y=mpg, col=cyl)) +\n  geom_point(shape=1,size=4)\n\n# am and cyl are factors, wt is numeric\nclass(mtcars$am)\nclass(mtcars$cyl)\nclass(mtcars$wt)\n\n# From the previous exercise\nggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +\n  geom_point(shape = 1, size = 4)\n\n# in this am,cyl are factors, also shape=21(circle with an outline) lets you choose fill and color\n# 1 - Map cyl to fill\nggplot(mtcars, aes(x = wt, y = mpg,fill=cyl)) +\n  geom_point(shape = 1, size = 4) # notice that fill doesnt work here, since shape=1 only has color atribute \n\n\n# 2 - Change shape and alpha of the points in the above plot\nggplot(mtcars, aes(x = wt, y = mpg,fill=cyl)) +\n  geom_point(shape = 21, size = 4,alpha=0.6)\n\n\nmtcars$am <- factor(mtcars$am)\n\n# 3 - Map am to col in the above plot\nggplot(mtcars, aes(x = wt, y = mpg,fill=cyl,col=am)) +\n  geom_point(shape = 21, size = 4,alpha=0.6)\n\n\n# Define a hexadecimal color\nmy_color <- \"#4ABEFF\"\n\n# 1 - First scatter plot, with col aesthetic:\nggplot(mtcars,aes(x=wt,y=mpg,col=cyl)) +\n  geom_point()\n\n\n# 2 - Plot 1, but set col attributes in geom layer:\nggplot(mtcars,aes(x=wt,y=mpg,col=cyl)) +\n  geom_point(col=my_color)\n\n\n# 3 - Plot 2, with fill instead of col aesthetic, plut shape and size attributes in geom layer.\nggplot(mtcars,aes(x=wt,y=mpg,fill=cyl)) +\n  geom_point(size=10,shape=23,col=my_color)\n\nmtcars$cyl <- factor(mtcars$cyl)\nggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n  geom_point(alpha=0.5)\n\n# Expand to draw points with alpha 0.5\nmtcars$cyl <- factor(mtcars$cyl)\nggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n  geom_point(alpha=0.5)\n\n\n# Expand to draw points with shape 24 and color yellow\nggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n  geom_point(shape=24,color=\"yellow\")\n\n\n# Expand to draw text with label rownames(mtcars) and color red\nggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +\n  geom_text(label=rownames(mtcars),color=\"red\")\n\n\nggplot(mtcars, aes(x = wt, y = mpg, col = cyl,label=qsec)) +\n  geom_text()\n\n##########\n##\n##\n#########\n\ncyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am))) \n\n# The base layer, cyl.am, is available for you\n# Add geom (position = \"stack\" by default)\ncyl.am + geom_bar()\n\n# Fill - show proportion\ncyl.am + \n  geom_bar(position = \"fill\")  \n\n# Dodging - principles of similarity and proximity\ncyl.am +\n  geom_bar(position = \"dodge\") \n\n# Clean up the axes with scale_ functions\nval = c(\"#E41A1C\", \"#377EB8\")\nlab = c(\"Manual\", \"Automatic\")\ncyl.am +\n  geom_bar(position = \"dodge\") +\n  scale_x_discrete(\"Cylinders\") + \n  scale_y_continuous(\"Number\") +\n  scale_fill_manual(\"Transmission\", \n                    values = val,\n                    labels = lab) \n\n\n\n\n",
    "created" : 1517879131863.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4201560689",
    "id" : "36BAA8FD",
    "lastKnownWriteTime" : 1518473929,
    "last_content_update" : 1518473929361,
    "path" : "~/Desktop/Learnings/Data Camp/Visualization using ggplot2/part-1.R",
    "project_path" : "part-1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}