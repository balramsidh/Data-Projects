credit_sub <- read.csv("credit.csv")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
packages = c("rpart","tidyverse","carot")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
packages = c("rpart","tidyverse","caret")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
credit_sub <- read.csv("credit.csv")
n <- nrow(credit_sub)
n_train <- round(n*0.8)
set.seed(1234)
train_indices <- sample(1:n,n_train)
credit_train <- credit_sub[train_indices,]
credit_test <- credit_sub[-train_indices,]
credit_model1 <- rpart(formula = default ~ .,
data = credit_train,
method = "class",
parms = list(split ='gini'))
credit_model2 <- rpart(formula = default ~ .,
data = credit_train,
method = "class",
parms = list(split = 'information'))
pred1 <- predict(object = credit_model1,
newdata = credit_test,
type = "class")
pred2 <- predict(object = credit_model2,
newdata = credit_test,
type = "class")
ce(actual = credit_test$default,
predicted = pred1 )
?ce()
ce(actual = credit_test$default,
predicted = pred1 )
ce(actual = credit_test$default,
predicted = pred1 )
?ce()
packages = c("rpart","tidyverse","caret")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
grade <- read.csv("grade.csv")
?prob
??prob
sample
?sample
grade <- read.csv("grade.csv")
str(grade)
set.seed(1)
assignment <- sample(1:3, size = nrow(grade), prob = 0.7, replace = TRUE)
?sample
assignment <- sample(1:3, size = nrow(grade), prob = c(0.7,0.15,0.15), replace = TRUE)
table(assignment)
grade_model <- rpart(formula = final_grade ~ .,
data = grade_train,
method = "anova")
set.seed(1)
assignment <- sample(1:3, size = nrow(grade), prob = c(0.7,0.15,0.15), replace = TRUE)
# Create a train, validation and tests from the original data frame
grade_train <- grade[assignment == 1, ]    # subset the grade data frame to training indices only
grade_valid <- grade[assignment ==2, ]  # subset the grade data frame to validation indices only
grade_test <- grade[assignment == 3, ]   # subset the grade data frame to test indices only
grade_model <- rpart(formula = final_grade ~ .,
data = grade_train,
method = "anova")
print(grade_model)
rpart.plot(x = grade_model, yesno = 2, type = 0, extra = 0)
packages = c("rpart","tidyverse","caret","rpart.plot")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
rpart.plot(x = grade_model, yesno = 2, type = 0, extra = 0)
View(grade)
pred <- predict(object = grade_model,   # model object
newdata = grade_test)  # test dataset
rmse(actual = grade_test$final_grade,
predicted = pred)
View(grade)
packages = c("rpart","tidyverse","caret","rpart.plot","metrics")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
rmse(actual = grade_test$final_grade,
predicted = pred)
help(package="metrics")
help(package="Metrics")
packages = c("rpart","tidyverse","caret","rpart.plot","Metrics")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
rmse(actual = grade_test$final_grade,
predicted = pred)
pred
table(pred
# Compute the RMSE
rmse(actual = grade_test$final_grade,
predicted = pred)
table(pred)
rpart.plot(x = grade_model, yesno = 2, type = 0, extra = 0)
packages = c("rpart","tidyverse","caret","rpart.plot","Metrics")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
rpart.plot(x = grade_model, yesno = 2, type = 0, extra = 0)
table(pred)
